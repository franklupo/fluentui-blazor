@namespace Microsoft.FluentUI.AspNetCore.Components
@inherits FluentComponentBase

@typeparam TItem

<FluentButton Id="@_idMenu"
              OnClick="@ShowMenu"
              AdditionalAttributes="@AdditionalAttributes"
              Appearance="@Appearance"
              Class="@Class"
              Style="@Style">
    <FluentIcon Value="@(new CoreIcons.Regular.Size20.Filter())" />
    @TextButtonMenu
</FluentButton>

<FluentMenu Anchor="@_idMenu" @bind-Open="@_show" @onmenuchange=OnMenuChangeAsync>
    <FluentMenuItem Id="New">
        <span slot="start"><FluentIcon Value="@(new CoreIcons.Regular.Size20.Add())" Slot="start" /></span>
        @TextNewFilter
    </FluentMenuItem>

    <FluentMenuItem Id="Edit" Disabled="@(SelectedItem == null)">
        <span slot="start"><FluentIcon Value="@(new CoreIcons.Regular.Size20.Edit())" Slot="start" /></span>
        @TextEditFilter
    </FluentMenuItem>

    <FluentMenuItem Id="Clear" Disabled="@(SelectedItem == null)">
        <span slot="start"><FluentIcon Value="@(new CoreIcons.Regular.Size20.FilterDismiss())" Slot="start" /></span>
        @TextClear
    </FluentMenuItem>

    @if (Items.Count != 0)
    {
        <FluentDivider />

        @foreach (var item in ItemsOrdered.Select((a, index) => new { Item = a, Index = index }))
        {
            var data = item;
            <FluentMenuItem Id="@($"{IdPrefixFilter}{data.Index}")"
                            Label="@data.Item.Title"
                            Checked="@(SelectedItem == data.Item)" />
        }
    }
</FluentMenu>
