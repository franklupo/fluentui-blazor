@namespace Microsoft.FluentUI.AspNetCore.Components

@inherits FluentComponentBase

@typeparam TItem

@code
{
    public virtual RenderFragment Render(DataFilterCriteriaCondition<TItem> condition, bool readOnly) => __builder =>
    {
        @RenderOperator(condition, readOnly)

        @RenderTypes(condition, readOnly)
    };

    public virtual RenderFragment RenderTypes(DataFilterCriteriaCondition<TItem> condition, bool readOnly) => __builder =>
    {
        if (TypeHelper.IsEnum(Type))
        {
            @RenderEnum(condition, readOnly)
        }
        else if (TypeHelper.IsNumber(Type))
        {
            @RenderNumber(condition, readOnly)
        }
        else if (TypeHelper.IsDate(Type))
        {
            @RenderDate(condition, readOnly)
        }
        else if (TypeHelper.IsBool(Type))
        {
            @RenderBoolean(condition, readOnly)
        }
        else if (TypeHelper.IsString(Type))
        {
            @RenderString(condition, readOnly)
        }
    };

    public virtual RenderFragment RenderOperator(DataFilterCriteriaCondition<TItem> condition, bool readOnly) => __builder =>
    {
        <FluentCombobox Autocomplete="ComboboxAutocomplete.Both"
                        TOption="DataFilterComparisonOperator"
                        Items="Operators"
                        OptionText="@DisplayText"
                        Height="200px"
                        Width="auto"
                        @bind-SelectedOption="@condition.Operator"
                        @bind-SelectedOption:after="@DataFilter.FilterChangedAsync"
                        Immediate="@DataFilter.Immediate"
                        ImmediateDelay="@DataFilter.ImmediateDelay"
                        Disabled="readOnly" />
    };

    public virtual RenderFragment RenderEnum(DataFilterCriteriaCondition<TItem> condition, bool readOnly) => __builder =>
    {
        @if (condition.Operator == DataFilterComparisonOperator.Empty || condition.Operator == DataFilterComparisonOperator.NotEmpty)
        {
        }
        else if (condition.Operator == DataFilterComparisonOperator.In || condition.Operator == DataFilterComparisonOperator.NotIn)
        {
        }
        else
        {
            <FluentCombobox Autocomplete="ComboboxAutocomplete.Both"
                            Items="@EnumValues"
                            OptionText="ValueDisplayTextInt"
                            @bind-SelectedOption="condition.Value"
                            @bind-SelectedOption:after="@DataFilter.FilterChangedAsync"
                            Immediate="@DataFilter.Immediate"
                            ImmediateDelay="@DataFilter.ImmediateDelay"
                            Disabled="readOnly" />
        }
    };

    public virtual RenderFragment RenderNumber(DataFilterCriteriaCondition<TItem> condition, bool readOnly) => __builder =>
    {
        @if (condition.Operator == DataFilterComparisonOperator.Empty || condition.Operator == DataFilterComparisonOperator.NotEmpty)
        {
        }
        else if (condition.Operator == DataFilterComparisonOperator.In || condition.Operator == DataFilterComparisonOperator.NotIn)
        {
        }
        else
        {
            <DynamicComponent Type="@typeof(FluentNumberField<>).MakeGenericType(Type)"
                              Parameters="@CreateNumericFieldEditorParameter(condition,readOnly)" />
        }
    };

    public virtual RenderFragment RenderDate(DataFilterCriteriaCondition<TItem> condition, bool readOnly) => __builder =>
    {
        @if (condition.Operator == DataFilterComparisonOperator.Empty || condition.Operator == DataFilterComparisonOperator.NotEmpty)
        {
        }
        else if (condition.Operator == DataFilterComparisonOperator.In || condition.Operator == DataFilterComparisonOperator.NotIn)
        {
        }
        else
        {
            @if (Type == typeof(DateTime) || Type == typeof(DateTime?))
            {
                <FluentDatePicker Value="Convert.ToDateTime(condition.Value)"
                                  ValueChanged="@(async (e) => await SetValueAsync(condition, e.ToDateTime()))"
                                  Immediate="@DataFilter.Immediate"
                                  ImmediateDelay="@DataFilter.ImmediateDelay"
                                  Disabled="readOnly" />

                <FluentTimePicker Value="Convert.ToDateTime(condition.Value)"
                                  ValueChanged="@(async (e) => await SetValueAsync(condition, e.ToDateTime()))"
                                  Immediate="@DataFilter.Immediate"
                                  ImmediateDelay="@DataFilter.ImmediateDelay"
                                  Disabled="readOnly" />
            }
            else if (Type == typeof(DateOnly) || Type == typeof(DateOnly?))
            {
                <FluentDatePicker Value="@(ConvertTo<DateOnly>(condition.Value).ToDateTime())"
                                  ValueChanged="@(async (e) => await SetValueAsync(condition, e.ToDateOnly()))"
                                  Immediate="@DataFilter.Immediate"
                                  ImmediateDelay="@DataFilter.ImmediateDelay"
                                  Disabled="readOnly" />
            }
            else if (Type == typeof(TimeOnly) || Type == typeof(TimeOnly?))
            {
                <FluentTimePicker Value="@(ConvertTo<TimeOnly>(condition.Value).ToDateTime())"
                                  ValueChanged="@(async (e) => await SetValueAsync(condition, e.ToTimeOnly()))"
                                  Immediate="@DataFilter.Immediate"
                                  ImmediateDelay="@DataFilter.ImmediateDelay"
                                  Disabled="readOnly" />
            }
        }
    };

    public virtual RenderFragment RenderBoolean(DataFilterCriteriaCondition<TItem> condition, bool readOnly) => __builder =>
    {
        @if (condition.Operator == DataFilterComparisonOperator.Empty || condition.Operator == DataFilterComparisonOperator.NotEmpty)
        {
        }
        else if (condition.Operator == DataFilterComparisonOperator.In || condition.Operator == DataFilterComparisonOperator.NotIn)
        {
        }
        else
        {
            <FluentCheckbox Value="Convert.ToBoolean(condition.Value)"
                            ValueChanged="@(async (e) => await SetValueAsync(condition, e))"
                            Immediate="@DataFilter.Immediate"
                            ImmediateDelay="@DataFilter.ImmediateDelay"
                            Disabled="readOnly" />
        }
    };

    public virtual RenderFragment RenderString(DataFilterCriteriaCondition<TItem> condition, bool readOnly) => __builder =>
    {
        @if (condition.Operator == DataFilterComparisonOperator.Empty || condition.Operator == DataFilterComparisonOperator.NotEmpty)
        {
        }
        else if (condition.Operator == DataFilterComparisonOperator.In || condition.Operator == DataFilterComparisonOperator.NotIn)
        {
        }
        else
        {
            <FluentTextField Value="@Convert.ToString(condition.Value)"
                             ValueChanged="@(async (e) => await SetValueAsync(condition, e))"
                             Immediate="@DataFilter.Immediate"
                             ImmediateDelay="@DataFilter.ImmediateDelay"
                             Disabled="readOnly" />
        }
    };
}
