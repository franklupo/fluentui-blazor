@namespace Microsoft.FluentUI.AspNetCore.Components
@using System.Linq.Expressions
@inherits FluentComponentBase

@typeparam TItem

<CascadingValue Value="this" IsFixed="true">
    @ChildContent
</CascadingValue>

@RenderGroup(Filter, null!, false, 0)

@code
{
    public RenderFragment RenderAdd(DataFilterDescriptor<TItem> group) => __builder =>
    {
        @if (AllowAddGroup || AllowAddCondition)
        {
            <FluentMenuButton ButtonAppearance="Appearance.Stealth"
                              Text="Add"
                              OnMenuChanged="@(async (e) => await AddAsync(group,e.Id!))">
                @if (AllowAddCondition)
                {
                    <FluentMenuItem Id="Condition">Condition</FluentMenuItem>
                }

                @if (AllowAddGroup)
                {
                    <FluentMenuItem Id="Group">Group</FluentMenuItem>
                }
            </FluentMenuButton>
        }
    };

    public RenderFragment RenderGroup(DataFilterDescriptor<TItem> group,
                                      DataFilterDescriptor<TItem> parent,
                                      bool allowDeleteGroup,
                                      int groupIndex) => __builder =>
    {
        <FluentStack Orientation="Orientation.Vertical" Style="@($"{GetGroupStyle(groupIndex)}")">
            <FluentStack Orientation="Orientation.Horizontal">
                @if (allowDeleteGroup)
                {
                    <FluentButton Appearance="Appearance.Stealth"
                                  OnClick="@(async () => await DeleteGroupAsync(group,parent))"
                                  IconStart="new CoreIcons.Regular.Size20.Dismiss()" />
                }

                @if (AllowLogicalOperator)
                {
                    <FluentSelect TOption="DataFilterLogicalOperator"
                                  Appearance="Appearance.Stealth"
                                  Width="100px"
                                  Items="@LogicalOperators"
                                  OptionText="@DisplayText"
                                  @bind-SelectedOption="group.Operator"
                                  Immediate="@Immediate"
                                  ImmediateDelay="@ImmediateDelay" />
                }

                @if (MenuAddPosition == DataFilterMenuAddPosition.Top)
                {
                    @RenderAdd(group)
                }
            </FluentStack>

            @foreach (var condition in group.Conditions.Select((a, b) => new { Item = a, Index = b }))
            {
                <FluentStack Orientation="Orientation.Horizontal"
                             VerticalAlignment="VerticalAlignment.Center"
                             Style="@($"{GetConditionStyle(groupIndex,condition.Index)}")">

                    <FluentButton Appearance="Appearance.Stealth"
                                  OnClick="@(async () => await DeleteFilterAsync(group,condition.Item))"
                                  IconStart="new CoreIcons.Regular.Size20.Dismiss()" />

                    <FluentCombobox Autocomplete="ComboboxAutocomplete.Both"
                                    Items="@GetAvailableProperties(condition.Item)"
                                    Height="200px"
                                    OptionText="@(a => a.Title)"
                                    @bind-SelectedOption="@condition.Item.Filter"
                                    @bind-SelectedOption:after="@FilterChangedAsync"
                                    Immediate="@Immediate"
                                    ImmediateDelay="@ImmediateDelay" />

                    @if (condition.Item.Filter != null)
                    {
                        @condition.Item.Render()
                    }
                </FluentStack>
            }

            @if (MenuAddPosition == DataFilterMenuAddPosition.Bottom)
            {
                @RenderAdd(group)
            }

            @foreach (var item in group.Groups)
            {
                <FluentStack Orientation="Orientation.Horizontal">
                    <span style="min-width: 40px;"></span>

                    @RenderGroup(item, group, true, groupIndex + 1)
                </FluentStack>
            }
        </FluentStack>
    };
}
