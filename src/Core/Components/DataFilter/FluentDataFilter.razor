@namespace Microsoft.FluentUI.AspNetCore.Components
@using System.Linq.Expressions
@inherits FluentComponentBase

@typeparam TItem

<CascadingValue Value="this" IsFixed="true">
    @ChildContent
</CascadingValue>

@RenderGroup(Filter, null!, false)

@code
{
    public RenderFragment RenderGroup(DataFilterDescriptor<TItem> group, DataFilterDescriptor<TItem> parent, bool allowDeleteGroup) => __builder =>
    {
        <FluentStack Orientation="Orientation.Vertical">
            <FluentStack Orientation="Orientation.Horizontal">
                @if (allowDeleteGroup)
                {
                    <FluentButton Appearance="Appearance.Stealth"
                                  OnClick="@(async () => await DeleteGroupAsync(group,parent))"
                                  IconStart="new CoreIcons.Regular.Size20.Dismiss()" />
                }

                @if (AllowLogicalOperator)
                {
                    <FluentSelect TOption="DataFilterLogicalOperator"
                                  Appearance="Appearance.Stealth"
                                  Width="100px"
                                  Items="@LogicalOperators"
                                  OptionText="@DisplayText"
                                  @bind-SelectedOption="group.Operator"
                                  Immediate="@Immediate"
                                  ImmediateDelay="@ImmediateDelay" />
                }

                @if (AllowAddGroup || AllowAddCondition)
                {
                    <FluentMenuButton ButtonAppearance="Appearance.Stealth"
                                      Text="Add"
                                      OnMenuChanged="@(async (e) => await AddAsync(group,e.Id!))">
                        @if (AllowAddCondition)
                        {
                            <FluentMenuItem Id="Condition">Condition</FluentMenuItem>
                        }

                        @if (AllowAddGroup)
                        {
                            <FluentMenuItem Id="Group">Group</FluentMenuItem>
                        }
                    </FluentMenuButton>
                }
            </FluentStack>

            @foreach (var item in group.Filters)
            {
                <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                    <FluentButton Appearance="Appearance.Stealth"
                                  OnClick="@(async () => await DeleteFilterAsync(group,item))"
                                  IconStart="new CoreIcons.Regular.Size20.Dismiss()" />

                    <FluentCombobox Autocomplete="ComboboxAutocomplete.Both"
                                    Items="@GetAvailableProperties(item)"
                                    Height="200px"
                                    OptionText="@(a => a.Title)"
                                    @bind-SelectedOption="@item.Property"
                                    @bind-SelectedOption:after="@FilterChangedAsync"
                                    Immediate="@Immediate"
                                    ImmediateDelay="@ImmediateDelay" />

                    @if (item.Property != null)
                    {
                        @item.Property.Render(item)
                    }
                </FluentStack>
            }

            @foreach (var item in group.Groups)
            {
                <FluentStack Orientation="Orientation.Horizontal">
                    <span style="min-width: 40px;"></span>

                    @RenderGroup(item, group, true)
                </FluentStack>
            }
        </FluentStack>
    };
}
