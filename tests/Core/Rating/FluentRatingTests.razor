@using Xunit;
@inherits TestContext
@code
{
    public FluentRatingTests()
    {
        JSInterop.Mode = JSRuntimeMode.Loose;
        Services.AddSingleton(new LibraryConfiguration());
    }

    [Fact]
    public void FluentRating_Empty()
    {
        // Arrange && Act
        var cut = Render(@<FluentRating />);

        // Assert
        cut.Verify();
    }

    [Fact]
    public void FluentRating_Value()
    {
        // Arrange && Act
        var cut = Render(@<FluentRating MaxValue="10" Value="2" />);

        // Assert
        cut.Verify();
    }

    [Fact]
    public void FluentRating_SelectValue()
    {
        int value = 0;

        // Arrange
        var cut = Render(@<FluentRating @bind-Value="@value" />);

        // Act: Click on the second star
        cut.FindAll("svg").ElementAt(1).Click();

        // Assert
        Assert.Equal(2, value);
    }

    [Fact]
    public void FluentRating_AllowResetFalse()
    {
        int value = 0;

        // Arrange
        var cut = Render(@<FluentRating @bind-Value="@value" AllowReset="false" />);

        // Act: Click twice on the second star
        cut.FindAll("svg").ElementAt(1).Click();
        cut.FindAll("svg").ElementAt(1).Click();

        // Assert
        Assert.Equal(2, value);
    }

    [Fact]
    public void FluentRating_AllowResetTrue()
    {
        int value = 0;

        // Arrange
        var cut = Render(@<FluentRating @bind-Value="@value" AllowReset="true" />);

        // Act: Click twice on the second star
        cut.FindAll("svg").ElementAt(1).Click();
        cut.FindAll("svg").ElementAt(1).Click();

        // Assert
        Assert.Equal(0, value);
    }

    [Fact]
    public void FluentRating_ReadOnlyTrue()
    {
        // Arrange && Act
        var cut = Render(@<FluentRating MaxValue="10" Value="2" ReadOnly="true"/>);

        cut.FindAll("svg").ElementAt(1).Click();

        // Assert
        cut.Verify();
    }

    [Fact]
    public void FluentRating_ReadOnlyFalse()
    {
        // Arrange && Act
        var cut = Render(@<FluentRating MaxValue="10" Value="2" ReadOnly="false" />);

        cut.FindAll("svg").ElementAt(1).Click();

        // Assert
        cut.Verify();
    }

    [Fact]
    public void FluentRating_DisabledTrue()
    {
        // Arrange && Act
        var cut = Render(@<FluentRating MaxValue="10" Value="2" Disabled="true" />);

        cut.FindAll("svg").ElementAt(1).Click();

        // Assert
        cut.Verify();
    }

    [Fact]
    public void FluentRating_DisabledFalse()
    {
        // Arrange && Act
        var cut = Render(@<FluentRating MaxValue="10" Value="2" Disabled="false" />);

        cut.FindAll("svg").ElementAt(1).Click();

        // Assert
        cut.Verify();
    }

    [Fact]
    public void FluentRating_PointerOut()
    {
        // Arrange && Act
        var cut = Render(@<FluentRating MaxValue="10" Value="2" Disabled="false" />);

        cut.FindAll("svg").ElementAt(3).PointerOut();

        // Assert
        cut.Verify();
    }

    [Fact]
    public void FluentRating_PointerOver()
    {
        // Arrange && Act
        var cut = Render(@<FluentRating MaxValue="10" Value="2" Disabled="false" />);

        cut.FindAll("svg").ElementAt(1).PointerOver();

        // Assert
        cut.Verify();
    }

    [Fact]
    public void FluentRating_KeyDown()
    {
        // Arrange && Act
        var cut = Render(@<FluentRating MaxValue="10" Value="2" Disabled="false" />);
        cut.FindAll("svg").ElementAt(2).KeyDown(key: Key.Left);
        cut.FindAll("svg").ElementAt(1).KeyDown(key: Key.Right);
        cut.FindAll("svg").ElementAt(2).KeyDown(key: Key.Up);
        cut.FindAll("svg").ElementAt(1).KeyDown(key: Key.Down);

        // Assert
        cut.Verify();
    }
}
