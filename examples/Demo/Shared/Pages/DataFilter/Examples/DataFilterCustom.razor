@using System.Linq.Expressions
@inject DataSource Data

<FluentStack Orientation="Orientation.Vertical">
    <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
        <FluentSelect TOption="DataFilterCaseSensitivity"
                      Label="String Case Sensitivity"
                      Items="@(Enum.GetValues<DataFilterCaseSensitivity>())"
                      OptionText="@(a => a.GetDisplayName())"
                      @bind-SelectedOption="_caseSensitivity" />
    </FluentStack>

    <srong>Data Filter</srong>

    <FluentDataFilter @bind-Criteria="@_criteria">
        <PropertyFilter Property="@(a=> a.TinyInteger)" Title="Tiny Integer" />
        <PropertyFilter Property="@(a=> a.SmallInteger)" />
        <PropertyFilter Property="@(a=> a.Integer)" />
        <PropertyFilter Property="@(a=> a.LongInteger)" />
        <PropertyFilter Property="@(a=> a.SinglePrecision)" />
        <PropertyFilter Property="@(a=> a.DoublePrecision)" />
        <PropertyFilter Property="@(a=> a.Decimal)" Unique="true" Title="Decimal (Unique)" />
        <PropertyFilter Property="@(a=> a.Boolean)" />
        <PropertyFilter Property="@(a=> a.String)" />
        <PropertyFilter Property="@(a=> a.DateTime)" />
        <PropertyFilter Property="@(a=> a.DateOnly)" />
        <PropertyFilter Property="@(a=> a.TimeOnly)" />
        <PropertyFilter Property="@(a=> a.Enum)" />
        <PropertyFilter Property="@(a=> a.Children.Enum)" Title="Child Enum" />

        <PropertyFilter Id="PF-Enum" Property="@(a=> a.Enum)" Title="Custom Enum (TemplateFilter)">
            <TemplateFilter>
                <FluentSlider TValue="int"
                              Orientation="Orientation.Horizontal"
                              Min="0"
                              Max="6"
                              Step="1"
                              Label="Slider value"
                              Value="Convert.ToInt32(context.Value)"
                              ValueChanged="@((e) => context.Value = (DataTypeDemoEnum)e)">
                    @foreach (var item in Enum.GetValues<DataTypeDemoEnum>())
                    {
                        var currEnum = item;
                        <FluentSliderLabel Position="@((int)currEnum)">@currEnum.GetDisplayName()</FluentSliderLabel>
                    }
                </FluentSlider>
            </TemplateFilter>
        </PropertyFilter>

        <PropertyFilter Id="PF-Boolean" Property="@(a=> a.Boolean)" Title="Custom Boolean (TemplateFilter)">
            <TemplateFilter>
                <FluentSwitch Value="Convert.ToBoolean(context.Value)" ValueChanged="@((e) => context.Value = e)" />
            </TemplateFilter>
        </PropertyFilter>

        <CustomFilter Id="CF-DataTypeDemo"
                      TItem="DataTypeDemo"
                      TProp="List<DataTypeDemoEnum>"
                      Title="Custom Enum Many (CustomFilter)"
                      ExpressionFilter="@GetExpressionEnumMany">
            <TemplateFilter>
                @{
                    var value = (List<DataTypeDemoEnum>)context.Value!;
                }

                <FluentAutocomplete TOption="DataTypeDemoEnum"
                                    AutoComplete="off"
                                    Multiple="true"
                                    OnOptionsSearch="@OnSearchEnumMany"
                                    OptionText="@(a => a.GetDisplayName())"
                                    SelectedOptions="value"
                                    SelectedOptionsChanged="@((e) => SelectedOptionsChangedEnumMany(e,value))" />
            </TemplateFilter>
        </CustomFilter>

        <FieldFilter Id="FF-Enum" Field="Enum" Title="Enum (FieldFilter)" />

        <FieldFilter Id="FF-Boolean" Field="Boolean" Title="Custom Boolean (FieldFilter)">
            <TemplateFilter>
                <FluentSwitch Value="Convert.ToBoolean(context.Value)" ValueChanged="@((e) => context.Value = e)" />
            </TemplateFilter>
        </FieldFilter>

        <FieldFilter Id="FF-Children.Enum" Field="Children.Enum" Title="Child Enum (FieldFilter)" />
    </FluentDataFilter>

    <FluentAccordion Style="width:100%;">
        <FluentAccordionItem Heading="Linq / Json" Expanded="false">
            <FluentStack Orientation="Orientation.Horizontal">
                <FluentTextArea Value="@_criteria.ToExpression(_caseSensitivity).ToString()" Rows="10" Style="width:100%;">Linq</FluentTextArea>
                <FluentTextArea Value="@_criteria.ToJson()" Rows="10" Style="width:100%;">JSON</FluentTextArea>
            </FluentStack>
        </FluentAccordionItem>
    </FluentAccordion>

    <FluentCard>
        <p>Data Grid</p>

        <FluentDataGrid Items="@DataTypeDemo">
            <PropertyColumn Property="@(a=> a.TinyInteger)" />
            <PropertyColumn Property="@(a=> a.SmallInteger)" />
            <PropertyColumn Property="@(a=> a.Integer)" />
            <PropertyColumn Property="@(a=> a.LongInteger)" />
            <PropertyColumn Property="@(a=> a.SinglePrecision)" />
            <PropertyColumn Property="@(a=> a.DoublePrecision)" />
            <PropertyColumn Property="@(a=> a.Decimal)" />
            <PropertyColumn Property="@(a=> a.Boolean)" />
            <PropertyColumn Property="@(a=> a.String)" />
            <PropertyColumn Property="@(a=> a.DateTime)" />
            <PropertyColumn Property="@(a=> a.DateOnly)" />
            <PropertyColumn Property="@(a=> a.TimeOnly)" />
            <PropertyColumn Property="@(a=> a.Enum)" />
            <PropertyColumn Property="@(a=> a.Children.Enum)" Title="Child Enum" />
        </FluentDataGrid>
    </FluentCard>
</FluentStack>

@code
{
    IQueryable<DataTypeDemo> DataTypeDemo => Data.DataTypeDemoQ.Where(_criteria.ToExpression(_caseSensitivity));
    DataFilterCaseSensitivity _caseSensitivity = DataFilterCaseSensitivity.Ignore;
    DataFilterCriteria<DataTypeDemo> _criteria = new();

    private void SelectedOptionsChangedEnumMany(IEnumerable<DataTypeDemoEnum> items, List<DataTypeDemoEnum> selected)
    {
        selected.Clear();
        selected.AddRange(items);
    }

    private void OnSearchEnumMany(OptionsSearchEventArgs<DataTypeDemoEnum> e)
        => e.Items = Enum.GetValues<DataTypeDemoEnum>().Where(a => a.GetDisplayName().Contains(e.Text, StringComparison.OrdinalIgnoreCase));

    private Expression<Func<DataTypeDemo, bool>> GetExpressionEnumMany(object? value, DataFilterCaseSensitivity caseSensitivity)
    {
        var selected = (List<DataTypeDemoEnum>)value!;
        return x => selected.Contains(x.Enum);
    }
}
